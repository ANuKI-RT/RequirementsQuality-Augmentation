[
    [
        "RTT",
        "MicroPython shall support the following function from the module sysas defined in Python 3.4: sys.exit([code])  If code  argument is missing, then the default valueshall be taken . Upon completion with sys.exita SystemExit exception shall be raised an d the C function starting the Virtual Machine execution shall return the given code  value bitwise ORed with 128.\n",
        "MicroPython should support the following function from the sython module defined in Python 3.4: sys.exit ([code]) If the code parameter is missing, the default value is accepted."
    ],
    [
        "RTT",
        "If the MicroPython Virtual Machine catches an exception du ring execution (uncaught by the MicroPython bytecode itself), it shall stopreturn a specific error code  and provide a means to retrieve the line number in the MicroPython source code where the exception was raised.\n",
        "If MicroPython Virtual Machine catches a ring exception (not caught by the MicroPython bytecode itself), it will stop the return of a specific error code and provide a means to redefine the string number in the MicroPython source code where the exception was made."
    ],
    [
        "PARA",
        "After being loaded in memory, the byte code ge nerated by the MicroPython cross-compiler shall be executable by the MicroPython Virtual Machine, with the semantic specified by the MicroPython source script.\n",
        "in memory the byte code generated by the micropython cross compiler shall be executable by the micropython virtual machine with the semantic specified by the micropython source script the"
    ],
    [
        "EDA",
        "The MicroPython Virtual Machine and compile chain shall allow building MicroPython Virtual Machine without support of memtime  and rtems  modules\/submodules",
        "the micropython virtual machine and compile chain shall allow building micropython virtual machine without support of memtime and rtems modules submodules "
    ],
    [
        "RTT",
        "MicroPython shall support the following function from the module arrayas defined in Python 3.4: array.array(typecode[, initialiser])\n",
        "MicroPython should support the following function from the arrayas module defined in Python 3.4: array.array (, initialiser)"
    ],
    [
        "RTT",
        "The Import Expander shall be able to treat both flavours of MicroPython import:   from m1 import … or   import m2, m3 If the as keyword is found, in any of these two flavours, then the tool shall report an error telling that it cannot handle such case.  For the first flavour, in order to limit comple xity, it shall be accepted to treat    from m1 import a, b  like   from m1 import *\n",
        "For the first flavor, in order to limit the layout, treatment from m1 import a, b as from m1 import * is allowed."
    ],
    [
        "EDA",
        "The MicroPython Virtual Machine and compile chain shall allow building MicroPython Virtual Machine without support of memtime  and rtems  modules\/submodules",
        "the micropython virtual machine and chain shall building micropython virtual machine without support of memtime and rtems modules submodules"
    ],
    [
        "RTT",
        "The MicroPython Virtual Machine executable code shall be designed to have a minimal size, which shall not exceed 200 kbytes.\n",
        "The code of the MicroPython virtual machine must be a minimum size, which should not exceed 200 kilobytes."
    ],
    [
        "EDA",
        "MicroPython shall support the following built-in types, as defined in Python 3.4: bool int float str object super type",
        "defined shall support the following built in types as micropython in python bool int float str object super type"
    ],
    [
        "PARA",
        "If the Software Development Environment is configured to do so, the Import Expander shall be called automatically before calling the cross-compiler (preprocessing of source code). The messages output by the Import Expander shall be visible in the Software Development Environment.\n",
        "if a software development environment is configured to do so the import expander shall be called automatically before calling the cross compiler preprocessing of source code the messages output by the import expander shall be visible in the software development environment"
    ],
    [
        "EDA",
        "The Software Development Environment shall provide a simple means to call the ISO checksum tool in order to produce the .bin  file for a given .mpy  file.",
        "the software development environment shall provide a simple means to call the iso checksum tool in order to produce the bin file for a given mpy file "
    ],
    [
        "EDA",
        "MicroPython shall support the following functions from the module gc, as defined in Python 3.4: gc.collect()  gc.disable()  gc.enable()  gc.isenabled()  gc.mem_free()  gc.mem_alloc()",
        "micropython shall put up the comply functions from the module gc as defined in python gc collect gc disable gc enable gc isenabled gc mem free gc mem alloc"
    ],
    [
        "PARA",
        "The MicroPython Virtual Machine shall be designed to execut e the bytecode using a good trade-off between memory consumption and execution time. For this choice, the minimisation of memory consumption should be prioritized.\n",
        "for this choice the minimisation of memory consumption should be prioritized"
    ],
    [
        "EDA",
        "The MicroPython Software Development Environment shall provide a preprocessing tool called \"Import Expander\". The Import Expander shall take a given Micr oPython script in input and it shall generate a semantically equivalent MicroPython script by replacing import statements by the content of the corresponding MicroPython source files, provided  that these modules are not C extensions. This process shall be recursive, in case the imported  modules themselves contain import statements.",
        "the micropython software development environment shall provide a preprocessing tool called expander the import expander shall a given micr opython in and it shall generate a semantically equivalent micropython script replacing import statements by the content of the corresponding micropython source files provided that modules are not c extensions this shall be recursive in case the imported modules themselves import statements"
    ],
    [
        "EDA",
        "The MicroPython cross-compiler source code an d\/or compile chain shall contain configuration parameters to account for constraints of specif ic hardware target (e.g. ROM \/ RAM size) or for selecting a specific trade-off for a given target.",
        "the micropython cross compiler source computer code an d or compile chain shall contain configuration parameters to account for constraints of specif ic ironware aim e g rom ram size of it or for selecting a specific trade off for a given aim"
    ],
    [
        "RTT",
        "The Import Expander shall be able to treat both flavours of MicroPython import:   from m1 import … or   import m2, m3 If the as keyword is found, in any of these two flavours, then the tool shall report an error telling that it cannot handle such case.  For the first flavour, in order to limit comple xity, it shall be accepted to treat    from m1 import a, b  like   from m1 import *\n",
        "For the first flavor, in order to limit the layout, it will be accepted to treat m1 import a, b, as m1 import *"
    ],
    [
        "RTT",
        "The Software Development Environment shall provide a simple means to load and execute a given bytecode file on a given LEON2 target.\n",
        "The development environment should provide a simple means to upload and execute a specified byte-code file to a specified LEON2 target"
    ],
    [
        "PARA",
        "In the C source code of MicroPython cross-compiler and Virtual Machine, any language feature out of scope of the requirements defined in the present document shall be disabled by C preprocessor directives.\n",
        "in the c source code of micropython cross-compiler and virtual machine any language feature out of scope of the requirements defined in the present document shall be disabled by c preprocessor directives "
    ],
    [
        "RTT",
        "MicroPython shall support the following function from the module arrayas defined in Python 3.4: array.array(typecode[, initialiser])\n",
        "MicroPython must support the following function from the arrayas module defined in Python 3.4: array.array (, initializer])"
    ],
    [
        "RTT",
        "The MicroPython Virtual Machine executable code shall be designed to have a minimal size, which shall not exceed 200 kbytes.\n",
        "The MicroPython virtual machine code must have a minimum size, which must not exceed 200 kilobytes."
    ],
    [
        "PARA",
        "In the C source code of MicroPython cross-compiler and Virtual Machine, any language feature out of scope of the requirements defined in the present document shall be disabled by C preprocessor directives.\n",
        "in the c source code of micropython cross-compiler and virtual machine any language feature out of scope of the requirements defined in the present document shall be disabled by preprocessor directives in c"
    ],
    [
        "EDA",
        "MicroPython shall support the following functions from the module binasciias defined in Python 3.4: hexlify(data)  unhexlify(hexstr)  a_base64(string) b_base64(data)",
        "micropython shall support the following functions the module defined in python hexlify data a string b"
    ],
    [
        "EDA",
        "MicroPython shall support the following classes, as defined in Python 3.4: classmethod  staticmethod",
        "micropython shall support the following classes as defined in python classmethod staticmethod "
    ],
    [
        "PARA",
        "The MicroPython language shall support object-orientation, as defined in Python 3.4\n",
        "the micropython language shall support object-oriented as defined in python 34"
    ],
    [
        "EDA",
        "The MicroPython cross-compiler source code an d\/or compile chain shall contain configuration parameters to account for constraints of specif ic hardware target (e.g. ROM \/ RAM size) or for selecting a specific trade-off for a given target.",
        "cross compiler source code an d or compile chain contain configuration parameters to account for constraints of ic target e rom ram size or for selecting a specific trade off for a given target"
    ],
    [
        "RTT",
        "The MicroPython Virtual Machine executable code shall be designed to have a minimal size, which shall not exceed 200 kbytes.\n",
        "The MicroPython virtual machine code must have a minimum size of 200 kilobytes or less."
    ],
    [
        "RTT",
        "The MicroPython Virtual Machine shall raise an exception in case  it is no more possible to allocate memory on the heap.\n",
        "The MicroPython virtual machine will make an exception in the event that it is no longer possible to keep the memory on heat."
    ],
    [
        "EDA",
        "MicroPython shall support the following functions from the module binasciias defined in Python 3.4: hexlify(data)  unhexlify(hexstr)  a_base64(string) b_base64(data)",
        "micropython shall support the trace functions from the mental faculty binasciias defined in python hexlify data unhexlify hexstr a base string b base data"
    ],
    [
        "RTT",
        "MicroPython shall support the following function from the module arrayas defined in Python 3.4: array.array(typecode[, initialiser])\n",
        "MicroPython should support the following function from the arrayas module defined in Python 3.4: array.array (, initialist)."
    ],
    [
        "PARA",
        "If the MicroPython Virtual Machine cannot allocate required memory during execution, it shall stop and it shall raise  a specific exception.\n",
        "if the micropython virtual machine cannot allocate required memory during execution it shall stop and it shall raise a specific exception"
    ],
    [
        "EDA",
        "The MicroPython Virtual Machine shall be qualified with requirements of ECSS CAT-B, as defined in [AD02] and [AD03].",
        "the micropython virtual machine shall be qualified requirements of ecss cat b as defined in ad and ad"
    ],
    [
        "RTT",
        "The MicroPython Virtual Machine executable code shall be designed to have a minimal size, which shall not exceed 200 kbytes.\n",
        "The MicroPython Virtual Machine code must have a minimum size of no more than 200 kilobytes."
    ],
    [
        "PARA",
        "The syntax and semantic of MicroPython is defined as a subset of Python 3.4, with some restrictions.\n",
        "a subset of python 34 is defined in micropython with some restrictions in its syntax and semantics"
    ],
    [
        "RTT",
        "The MicroPython Virtual Machine shall raise an exception in case  it is no more possible to allocate memory on the heap.\n",
        "The MicroPython virtual machine will make an exception in case it is no longer possible to save memory on the heater."
    ],
    [
        "PARA",
        "The MicroPython Virtual Machine source, configuration, tool chai n and test bench files shall be maintained in configuration control.",
        "the micropython virtual machine source configuration tool chai n and test bench files shall be maintained in configuration control mode"
    ],
    [
        "EDA",
        "MicroPython shall support the following built-in types, as defined in Python 3.4: bool int float str object super type",
        "micropython shall support the following built in types as defined in python bool int float str object top notch type"
    ],
    [
        "EDA",
        "MicroPython shall support the following classes, as defined in Python 3.4: classmethod  staticmethod",
        "micropython shall support the following classes as fix in python classmethod staticmethod"
    ],
    [
        "RTT",
        "MicroPython shall support the following function from the module sysas defined in Python 3.4: sys.exit([code])  If code  argument is missing, then the default valueshall be taken . Upon completion with sys.exita SystemExit exception shall be raised an d the C function starting the Virtual Machine execution shall return the given code  value bitwise ORed with 128.\n",
        "MicroPython should support the following function from the sython module defined in Python 3.4: sys.exit ([code]) If there is no code argument, the default value is accepted."
    ],
    [
        "RTT",
        "The MicroPython Virtual Machine executable code shall be designed to have a minimal size, which shall not exceed 200 kbytes.\n",
        "The MicroPython Virtual Machine code must have a minimum size not exceeding 200 kilobytes."
    ],
    [
        "EDA",
        "MicroPython shall support the following functions from the module binasciias defined in Python 3.4: hexlify(data)  unhexlify(hexstr)  a_base64(string) b_base64(data)",
        "micropython shall support the following functions from the module binasciias defined hexlify data unhexlify hexstr base string b base data"
    ],
    [
        "RTT",
        "MicroPython shall support the following function from the module arrayas defined in Python 3.4: array.array(typecode[, initialiser])\n",
        "MicroPython should support the following function from the arrayas module defined in Python 3.4: array.array (, initialiser])"
    ],
    [
        "PARA",
        "The Virtual Machine test suite shall be automated.\n",
        "the virtual machine testing suite shall be automated"
    ],
    [
        "RTT",
        "The Import Expander shall be able to treat both flavours of MicroPython import:   from m1 import … or   import m2, m3 If the as keyword is found, in any of these two flavours, then the tool shall report an error telling that it cannot handle such case.  For the first flavour, in order to limit comple xity, it shall be accepted to treat    from m1 import a, b  like   from m1 import *\n",
        "For the first flavor, in order to limit the layout, treatment from m1 import a, b as m1 import * is accepted."
    ],
    [
        "EDA",
        "The MicroPython Software Development Environment shall provide a preprocessing tool called \"Import Expander\". The Import Expander shall take a given Micr oPython script in input and it shall generate a semantically equivalent MicroPython script by replacing import statements by the content of the corresponding MicroPython source files, provided  that these modules are not C extensions. This process shall be recursive, in case the imported  modules themselves contain import statements.",
        "annex the micropython software development environment shall provide a preprocessing tool called import expander the import expander shall take a given micr opython script in input non and it shall generate a semantically equivalent micropython script by replacing import statements by the content of the corresponding micropython source files significance provided that putz these modules guinea pig are not c extensions this process shall be recursive import in case the imported modules themselves contain import statements"
    ],
    [
        "RTT",
        "The MicroPython Virtual Machine shall raise an exception in case  it is no more possible to allocate memory on the heap.\n",
        "The MicroPython virtual machine will make an exception if it is no longer possible to store memory on heat."
    ],
    [
        "EDA",
        "The Software Development Environment shall provide a simple means to call the ISO checksum tool in order to produce the .bin  file for a given .mpy  file.",
        "the software development environment shall provide a simple means to call the iso checksum tool in order to produce the bin mean value file for binful a given mpy file"
    ],
    [
        "EDA",
        "The MicroPython Virtual Machine and compile chain shall allow building MicroPython Virtual Machine without support of memtime  and rtems  modules\/submodules",
        "the micropython virtual automobile and compile chain shall allow building micropython virtual automobile without stick out of memtime and rtems modules submodules"
    ],
    [
        "RTT",
        "The Software Development Environment shall provide a simple means to load and execute a given bytecode file on a given LEON2 target.\n",
        "The development environment should provide a simple means for loading and executing a specified byte code to a specified LEON2 target."
    ],
    [
        "EDA",
        "The MicroPython Virtual Machine shall be qualified with requirements of ECSS CAT-B, as defined in [AD02] and [AD03].",
        "the be virtual machine shall micropython qualified with requirements of ecss cat b as defined in ad and ad"
    ],
    [
        "RTT",
        "MicroPython shall support the following function from the module sysas defined in Python 3.4: sys.exit([code])  If code  argument is missing, then the default valueshall be taken . Upon completion with sys.exita SystemExit exception shall be raised an d the C function starting the Virtual Machine execution shall return the given code  value bitwise ORed with 128.\n",
        "MicroPython should support the following function from the sython module defined in Python 3.4: sys.exit ([code]) If there is no code parameter, the default value is accepted."
    ],
    [
        "PARA",
        "The Import Expander shall be able to do \"smart expansion\": for a given list of modules, it shall analyse the importing MicroPython procedure and only copy the subset of assignments of variables that are actually used in this procedure.\n",
        "The Import Expander shall be able to do \"smart expansion\": for a given list of modules, it shall analyse the importing MicroPython procedure and only copy the subset of assignments of variables that are actually used in this procedure.\n"
    ],
    [
        "EDA",
        "The Software Development Environment shall provide a simple means to call the ISO checksum tool in order to produce the .bin  file for a given .mpy  file.",
        "the software development environment shall provide a simple means to ring the iso checksum tool in order to produce the bin file for a present mpy file"
    ],
    [
        "EDA",
        "MicroPython shall support the following functions from the module gc, as defined in Python 3.4: gc.collect()  gc.disable()  gc.enable()  gc.isenabled()  gc.mem_free()  gc.mem_alloc()",
        "micropython shall support the following mathematical function from the module gc as delimit in python gc collect gc disable gc enable gc isenabled gc mem free gc mem alloc"
    ],
    [
        "RTT",
        "If the given script has an invalid syntax, the MicroPython cross-compiler shall report an error, indicating the first invalid li ne. No bytecode file shall be generated in such case.\n",
        "If this script has an incorrect syntax, the MicroPython cross-compiler will report the error by specifying the first incorrect li ne."
    ],
    [
        "RTT",
        "If the MicroPython Virtual Machine catches an exception du ring execution (uncaught by the MicroPython bytecode itself), it shall stopreturn a specific error code  and provide a means to retrieve the line number in the MicroPython source code where the exception was raised.\n",
        "If MicroPython Virtual Machine catches an exception on a ring run (not caught by the MicroPython bytecode itself), it will stop the return of a certain error code and provide a means to re-check the string number in the MicroPython source code where the exception was made."
    ],
    [
        "EDA",
        "The MicroPython Software Development Environment shall provide a preprocessing tool called \"Import Expander\". The Import Expander shall take a given Micr oPython script in input and it shall generate a semantically equivalent MicroPython script by replacing import statements by the content of the corresponding MicroPython source files, provided  that these modules are not C extensions. This process shall be recursive, in case the imported  modules themselves contain import statements.",
        "the micropython software development environment shall provide a preprocessing tool called import expander the import expander shall take a micr opython script in input and shall generate semantically equivalent script by import statements by the content of the corresponding micropython source files that these modules are not c extensions this process shall be recursive in case the imported modules themselves contain import statements"
    ],
    [
        "RTT",
        "If the given script has an invalid syntax, the MicroPython cross-compiler shall report an error, indicating the first invalid li ne. No bytecode file shall be generated in such case.\n",
        "If this script has an incorrect syntax, the MicroPython cross-compiler will report the error, pointing out the first incorrect li ne."
    ],
    [
        "EDA",
        "The MicroPython Virtual Machine shall be qualified with requirements of ECSS CAT-B, as defined in [AD02] and [AD03].",
        "the micropython virtual machine shall be qualified with prerequisite of ecss cat b as defined in ad and ad"
    ],
    [
        "PARA",
        "The MicroPython environment is made up of a Software Development Environment (development of MicroPython script), a cross-compiler (production of bytecode from MicroPython script), a Virtual Machine (execution of the bytecode).\n",
        "it is made up of a software development environment development of a micropython script a cross compiler production of bytecode from the micropython script a virtual machine execution of the bytecode and"
    ],
    [
        "RTT",
        "If the given script has an invalid syntax, the MicroPython cross-compiler shall report an error, indicating the first invalid li ne. No bytecode file shall be generated in such case.\n",
        "If the script has an incorrect syntax, the MicroPython cross-compiler reports an error, indicating the first incorrect li ne."
    ],
    [
        "EDA",
        "MicroPython shall support the following built-in types, as defined in Python 3.4: bool int float str object super type",
        "micropython shall support the following built in types as defined in python bool int float str object super type"
    ],
    [
        "RTT",
        "The Software Development Environment shall provide a simple means to load and execute a given bytecode file on a given LEON2 target.\n",
        "The development environment provides a simple means for loading and executing a specified byte code to a specified LEON2 target."
    ],
    [
        "RTT",
        "If the given script has an invalid syntax, the MicroPython cross-compiler shall report an error, indicating the first invalid li ne. No bytecode file shall be generated in such case.\n",
        "If this script has an incorrect syntax, the MicroPython cross-compiler reports an error by pointing to the first incorrect li ne."
    ],
    [
        "EDA",
        "MicroPython shall support the following functions from the module gc, as defined in Python 3.4: gc.collect()  gc.disable()  gc.enable()  gc.isenabled()  gc.mem_free()  gc.mem_alloc()",
        "micropython shall support gc gc functions from the module the as defined in python gc collect gc disable gc enable gc isenabled gc mem free following mem alloc"
    ],
    [
        "RTT",
        "The Import Expander shall be able to treat both flavours of MicroPython import:   from m1 import … or   import m2, m3 If the as keyword is found, in any of these two flavours, then the tool shall report an error telling that it cannot handle such case.  For the first flavour, in order to limit comple xity, it shall be accepted to treat    from m1 import a, b  like   from m1 import *\n",
        "For the first flavor, in order to limit the layout, treatment from m1 import a, b as m1 import * is allowed."
    ],
    [
        "RTT",
        "MicroPython shall support the following built-in types, as defined in Python 3.4: bytearray bytes tuple dict list\n",
        "MicroPython should support the following built-in types defined in Python 3.4: bytearray bytes tuple list."
    ],
    [
        "EDA",
        "MicroPython shall support the following classes, as defined in Python 3.4: classmethod  staticmethod",
        "micropython shall define support the following classes as defined in python classmethod staticmethod"
    ],
    [
        "RTT",
        "MicroPython shall support the following function from the module sysas defined in Python 3.4: sys.exit([code])  If code  argument is missing, then the default valueshall be taken . Upon completion with sys.exita SystemExit exception shall be raised an d the C function starting the Virtual Machine execution shall return the given code  value bitwise ORed with 128.\n",
        "MicroPython should support the following function from the sython module defined in Python 3.4: sys.exit ([code]) If the code argument is missing, the default value is accepted."
    ],
    [
        "EDA",
        "The Software Development Environment shall provide a simple means to call the ISO checksum tool in order to produce the .bin  file for a given .mpy  file.",
        "the software development provide a simple means to call the iso checksum in order to produce the bin for a given mpy file"
    ],
    [
        "PARA",
        "The MicroPython cross-compiler shall be designed to produce a bytecode with a minimal size.\n",
        "micropython cross compiler shall be designed to produce a minimal size of bytecode "
    ],
    [
        "RTT",
        "MicroPython shall support the following function from the module sysas defined in Python 3.4: sys.exit([code])  If code  argument is missing, then the default valueshall be taken . Upon completion with sys.exita SystemExit exception shall be raised an d the C function starting the Virtual Machine execution shall return the given code  value bitwise ORed with 128.\n",
        "MicroPython should support the following function from the sython module defined in Python 3.4: sys.exit ([code]) If there is no code argument, the default value is accepted."
    ],
    [
        "RTT",
        "The MicroPython Virtual Machine shall raise an exception in case  it is no more possible to allocate memory on the heap.\n",
        "The MicroPython virtual machine will make an exception in the event that it is no longer possible to store the memory on heat."
    ],
    [
        "RTT",
        "The Import Expander shall be able to treat both flavours of MicroPython import:   from m1 import … or   import m2, m3 If the as keyword is found, in any of these two flavours, then the tool shall report an error telling that it cannot handle such case.  For the first flavour, in order to limit comple xity, it shall be accepted to treat    from m1 import a, b  like   from m1 import *\n",
        "For the first flavor, in order to limit the layout, it will be accepted to treat m1 import a, b as m1 import *"
    ],
    [
        "RTT",
        "The Import Expander shall be able to treat both flavours of MicroPython import:   from m1 import … or   import m2, m3 If the as keyword is found, in any of these two flavours, then the tool shall report an error telling that it cannot handle such case.  For the first flavour, in order to limit comple xity, it shall be accepted to treat    from m1 import a, b  like   from m1 import *\n",
        "For the first flavor, treatment from m1 import a, b as from m1 import * is allowed in order to limit the layout."
    ],
    [
        "EDA",
        "MicroPython shall support the following classes, as defined in Python 3.4: classmethod  staticmethod",
        "micropython shall support the following classes as defined define in python classmethod staticmethod"
    ],
    [
        "EDA",
        "The Software Development Environment shall provide a simple means to call the ISO checksum tool in order to produce the .bin  file for a given .mpy  file.",
        "the software development environment shall furnish a simple means to call the iso checksum puppet in order to produce the bin file for a given mpy file"
    ],
    [
        "RTT",
        "The Software Development Environment shall provide a simple means to load and execute a given bytecode file on a given LEON2 target.\n",
        "The development environment provides a simple means to load and execute a predefined byte code to a predefined LEON2 target."
    ],
    [
        "RTT",
        "MicroPython shall support the following built-in types, as defined in Python 3.4: bytearray bytes tuple dict list\n",
        "MicroPython should support the following built-in types defined in Python 3.4: bytearray bytes tuple list"
    ],
    [
        "RTT",
        "The Software Development Environment shall provide a simple means to load and execute a given bytecode file on a given LEON2 target.\n",
        "The development environment should provide a simple means to load and execute a specified byte code to a specified LEON2 target."
    ],
    [
        "EDA",
        "The Import Expander shall be able to report all the names that have been retained by the \"smart expansion\".",
        "the import expander shall be able bodied to report all the names that have been retained by the smart expansion"
    ],
    [
        "RTT",
        "The MicroPython Virtual Machine shall raise an exception in case  it is no more possible to allocate memory on the heap.\n",
        "The MicroPython virtual machine will make an exception if it is no longer possible to save memory at the click of a button."
    ],
    [
        "RTT",
        "MicroPython shall support the following built-in ex ception class hierarchy, as defined in Python 3.4: BaseException    GeneratorExit    KeyboardInterrupt    SystemExit    Exception      ArithmeticError        OverflowError        ZeroDivisionError      AssertionError      AttributeError      EOFError      ImportError      LookupError        IndexError        KeyError      MemoryError      NameError      OSError      RuntimeError        NotImplementedError      StopIteration      SyntaxError        IndentationError      TypeError      ValueError       UnicodeError\n",
        "MicroPython should support the following built-in hierarchy of ex ception classes, as defined in Python 3.4: BaseException Generation Exit KeyboardInterrupt Exception ArithmeticError OverflowError ZeroDixonError AssertionError AttributeError EOFError ImplementError LookupError IndexError KeyError MemoryError NameError OSError RuntimeError NotImployError StopIteration SyntaxError EmployationError Valuee"
    ],
    [
        "EDA",
        "MicroPython shall provide the module memwith the following functions: mem.read_u32(addr)  Return the 32-bit value at the given addr  address. addr  must be word aligned.  mem.write_u32(addr, value) Write value  to the given addr  address. addr  must be word aligned. Returns None .  mem.read_buf(addr, buf) Read a memory region starting at the address addr  into the given buffer. buf  must be a bytearray  or an array  and its length specifies the length of the read. The read is done using 32-bit words so addr  must be word aligned and the length of buf  must be a multiple of 4. Returns None .  mem.write_buf(addr, buf) Write the given buffer to the memory address addr . buf  must be a bytearray  or an array  and its length specifies the length of the write. The write is done using-bit words so addr  must be word aligned and the length of buf  must be a multiple of 4. Returns None.",
        "micropython buf provide the module memwith the following functions mem read u addr return the bit value at the address addr address addr must to word aligned mem write u addr value write value be the be addr address addr must given word aligned returns none mem read buf addr shall read a memory region starting at and given addr into the word buffer buf must be a its or an array and its addr specifies the is of must read the read length done using bit words so addr must be given aligned the the length of buf must be a multiple so returns none mem write buf addr the write buf given buffer to the memory address addr buf must be a bytearray or an array and bytearray write word the length of the write the of is done using bit words of length the be specifies aligned and the length length buf must be a multiple of returns none"
    ],
    [
        "RTT",
        "The MicroPython Virtual Machine executable code shall be designed to have a minimal size, which shall not exceed 200 kbytes.\n",
        "The MicroPython virtual machine code must be a minimum size, which should not exceed 200 kbytes."
    ],
    [
        "EDA",
        "The Software Development Environment shall provide a static analysis tool to display the call tree of a given MicroPython procedure.",
        "the software shall environment given provide a static analysis tool to display the call tree of a development micropython procedure"
    ],
    [
        "RTT",
        "If the MicroPython Virtual Machine catches an exception du ring execution (uncaught by the MicroPython bytecode itself), it shall stopreturn a specific error code  and provide a means to retrieve the line number in the MicroPython source code where the exception was raised.\n",
        "If MicroPython Virtual Machine catches a ring exception (not caught by the MicroPython bytecode itself), it will stop the return of a certain error code and provide a means to re-check the string number in the MicroPython source code where the exception was made."
    ],
    [
        "RTT",
        "MicroPython shall support the following function from the module arrayas defined in Python 3.4: array.array(typecode[, initialiser])\n",
        "MicroPython must support the following function from the arrayas module defined in Python 3.4: array.array (, initialiser])"
    ],
    [
        "RTT",
        "MicroPython shall support the following built-in types, as defined in Python 3.4: bytearray bytes tuple dict list\n",
        "MicroPython should support the following built-in types defined in Python 3.4: bytearray bytes tuple direct list."
    ],
    [
        "RTT",
        "MicroPython shall support the following built-in types, as defined in Python 3.4: bytearray bytes tuple dict list\n",
        "MicroPython supports the following built-in types as defined in Python 3.4: bytearray bytes tuple diplist"
    ],
    [
        "RTT",
        "If the MicroPython Virtual Machine catches an exception du ring execution (uncaught by the MicroPython bytecode itself), it shall stopreturn a specific error code  and provide a means to retrieve the line number in the MicroPython source code where the exception was raised.\n",
        "If the MicroPython Virtual Machine catches a ring exception (not caught by the MicroPython bytecode itself), it will stop the return of a specific error code and provide a means to redefine the string number in the MicroPython source code where the exception was made."
    ],
    [
        "EDA",
        "MicroPython shall support the following built-in types, as defined in Python 3.4: bool int float str object super type",
        "support shall micropython the following built in types as defined in python bool int float str object super type"
    ],
    [
        "PARA",
        "The MicroPython Software Development Environment shall provide the user a simple means to call the MicroPython cross-compiler on any MicroPython procedure to generate the associated bytecode file (extension .mpy). The messages output by the cross-compiler shall be visible in the Software Development Environment.\n",
        "The MicroPython Software Development Environment shall provide the user a simple means to call the MicroPython cross-compiler on any MicroPython procedure to generate the associated bytecode file (extension .mpy). The messages output by the cross-compiler shall be visible in the Software Development Environment.\n"
    ],
    [
        "EDA",
        "The MicroPython Virtual Machine and compile chain shall allow building MicroPython Virtual Machine without support of memtime  and rtems  modules\/submodules",
        "the micropython virtual machine modules compile of shall allow building micropython virtual machine without support chain memtime and rtems and submodules"
    ],
    [
        "PARA",
        "The Software Development Environment shall provide a static analysis tool to display violation to coding standard for a given MicroPython procedure and possibly detect some errors.\n",
        "the software development environment shall provide a static analysis tool to display violation to the coding standard for a given micropython procedure and possibly detect some errors "
    ],
    [
        "RTT",
        "MicroPython shall support the following built-in ex ception class hierarchy, as defined in Python 3.4: BaseException    GeneratorExit    KeyboardInterrupt    SystemExit    Exception      ArithmeticError        OverflowError        ZeroDivisionError      AssertionError      AttributeError      EOFError      ImportError      LookupError        IndexError        KeyError      MemoryError      NameError      OSError      RuntimeError        NotImplementedError      StopIteration      SyntaxError        IndentationError      TypeError      ValueError       UnicodeError\n",
        "MicroPython should support the following built-in hierarchy of ex ception classes, as defined in Python 3.4: BaseException Generation Exit KeyboardInterrupt Exception ArithmeticError OverflowError ZeroDionError AssertionError AttributeError EOFError EmployError LookupError IndexError KeyError MemoryError NameError OSEError RuntimeError NotImployError StopIteration SyntaxError EmployError TypeError"
    ],
    [
        "RTT",
        "If the MicroPython Virtual Machine catches an exception du ring execution (uncaught by the MicroPython bytecode itself), it shall stopreturn a specific error code  and provide a means to retrieve the line number in the MicroPython source code where the exception was raised.\n",
        "If MicroPython Virtual Machine catches an exception on a ring run (not caught by the MicroPython bytecode itself), it will stop the return of a certain error code and provide a means to redefine the string number in the MicroPython source code where the exception was made."
    ],
    [
        "EDA",
        "MicroPython shall support the following classes, as defined in Python 3.4: classmethod  staticmethod",
        "micropython classes support the following shall as defined in python classmethod staticmethod"
    ],
    [
        "RTT",
        "If the MicroPython Virtual Machine catches an exception du ring execution (uncaught by the MicroPython bytecode itself), it shall stopreturn a specific error code  and provide a means to retrieve the line number in the MicroPython source code where the exception was raised.\n",
        "If MicroPython Virtual Machine catches a ring exception (not caught by the MicroPython bytecode itself), it will stop the return of a specific error code and provide a means to re-check the string number in the MicroPython source code in which the exception was made."
    ],
    [
        "RTT",
        "If the MicroPython Virtual Machine catches an exception du ring execution (uncaught by the MicroPython bytecode itself), it shall stopreturn a specific error code  and provide a means to retrieve the line number in the MicroPython source code where the exception was raised.\n",
        "If MicroPython Virtual Machine catches an exception on a ring run (not caught by the MicroPython bytecode itself), it will stop the return of a specific error code and provide a means to re-check the line number in the MicroPython source code where the exception was made."
    ],
    [
        "RTT",
        "The MicroPython Virtual Machine executable code shall be designed to have a minimal size, which shall not exceed 200 kbytes.\n",
        "The MicroPython Virtual Machine code must have a minimum size of 200 kilobytes."
    ]
]