[
    [
        "EDA",
        "The MicroPython Virtual Machine shall be qualified with requirements of ECSS CAT-B, as defined in [AD02] and [AD03].",
        "the micropython virtual machine shall be qualified with requirements of ecss cat b as defined in ad barf and ad"
    ],
    [
        "EDA",
        "The MicroPython Virtual Machine shall be qualified with requirements of ECSS CAT-B, as defined in [AD02] and [AD03].",
        "the micropython virtual machine shall be qualified with requirements of ecss spew b as defined in ad and ad"
    ],
    [
        "EDA",
        "The MicroPython Virtual Machine shall be qualified with requirements of ECSS CAT-B, as defined in [AD02] and [AD03].",
        "the micropython virtual atomic number machine shall be qualified with requirements of ecss cat b as defined in ad and ad"
    ],
    [
        "EDA",
        "The MicroPython Virtual Machine shall be qualified with requirements of ECSS CAT-B, as defined in [AD02] and [AD03].",
        "of micropython virtual machine shall be qualified with requirements the ecss cat b as defined in ad and ad"
    ],
    [
        "EDA",
        "The MicroPython Virtual Machine shall be qualified with requirements of ECSS CAT-B, as defined in [AD02] and [AD03].",
        "the micropython virtual machine shall be qualified with of requirements ecss cat b as defined in ad and ad"
    ],
    [
        "EDA",
        "The MicroPython Virtual Machine shall be qualified with requirements of ECSS CAT-B, as defined in [AD02] and [AD03].",
        "the micropython virtual machine shall be qualified with requirements of ecss cat b as defined in ad and ad "
    ],
    [
        "EDA",
        "The fmax and fmaxf procedures shall determine the maximum numeric value of the argument x and y.",
        "the fmax and fmaxf procedures shall determine the maximum numeric value of the argument x and y"
    ],
    [
        "EDA",
        "The fmax and fmaxf procedures shall determine the maximum numeric value of the argument x and y.",
        "the fmax and fmaxf procedures shall determine the numeric maximum value of the argument x and y"
    ],
    [
        "EDA",
        "The fmax and fmaxf procedures shall determine the maximum numeric value of the argument x and y.",
        "the fmax and fmaxf procedures shall determine the maximum numeric value of the argument x and y "
    ],
    [
        "EDA",
        "The fmax and fmaxf procedures shall determine the maximum numeric value of the argument x and y.",
        "the fmax and fmaxf procedures shall determine statement the maximum numeric value of the argument x and y"
    ],
    [
        "EDA",
        "The fmax and fmaxf procedures shall determine the maximum numeric value of the argument x and y.",
        "the fmax and fmaxf procedures shall determine the maximum numeric value of the argument go and y"
    ],
    [
        "EDA",
        "The fmax and fmaxf procedures shall determine the maximum numeric value of the argument x and y.",
        "the fmax and fmaxf procedures shall determine the maximum numeric value x the argument of and y"
    ],
    [
        "EDA",
        "The log and logf procedures shall return Not a Number, if the argument x is Not a Number.",
        "the log and logf procedures shall return not a numerate if the argument x is not a numerate"
    ],
    [
        "EDA",
        "The log and logf procedures shall return Not a Number, if the argument x is Not a Number.",
        "number log and logf procedures shall return not a the if the argument x is not a number"
    ],
    [
        "EDA",
        "The log and logf procedures shall return Not a Number, if the argument x is Not a Number.",
        "the log and logf procedures shall return not a bit if the argument x is not a bit"
    ],
    [
        "EDA",
        "The log and logf procedures shall return Not a Number, if the argument x is Not a Number.",
        "the log and logf procedures shall return not a number x the argument if is not a number"
    ],
    [
        "EDA",
        "The log and logf procedures shall return Not a Number, if the argument x is Not a Number.",
        "the log and logf procedures shall return not a number if the argument x is not a number "
    ],
    [
        "EDA",
        "The log and logf procedures shall return Not a Number, if the argument x is Not a Number.",
        "the log and logf procedures shall not a number if the argument x is not a number"
    ],
    [
        "EDA",
        "The system shall have a procedure to terminate the system.",
        "the system shall have a procedure to terminate the"
    ],
    [
        "EDA",
        "The system shall have a procedure to terminate the system.",
        "the system shall have send away a procedure to terminate the system"
    ],
    [
        "EDA",
        "The system shall have a procedure to terminate the system.",
        "the the shall have a procedure to terminate system system"
    ],
    [
        "EDA",
        "The system shall have a procedure to terminate the system.",
        "the system shall have a procedure to terminate the system "
    ],
    [
        "EDA",
        "The system shall have a procedure to terminate the system.",
        "the system shall have a procedure to terminate the system"
    ],
    [
        "EDA",
        "The system shall have a procedure to terminate the system.",
        "the make system shall have a procedure to terminate the system"
    ],
    [
        "EDA",
        "The exp and expf procedures shall calculate the base eexponential value of their argument x.",
        "statement the exp and expf procedures shall calculate the base eexponential value of their argument x"
    ],
    [
        "EDA",
        "The exp and expf procedures shall calculate the base eexponential value of their argument x.",
        "the exp and expf procedures shall calculate the base eexponential time value of their argument x"
    ],
    [
        "EDA",
        "The exp and expf procedures shall calculate the base eexponential value of their argument x.",
        "the exp and the procedures shall calculate expf base eexponential value of their argument x"
    ],
    [
        "EDA",
        "The exp and expf procedures shall calculate the base eexponential value of their argument x.",
        "the exp and expf procedures shall calculate base eexponential value of their argument x"
    ],
    [
        "EDA",
        "The exp and expf procedures shall calculate the base eexponential value of their argument x.",
        "the exp and expf routine shall calculate the base eexponential value of their argument x"
    ],
    [
        "EDA",
        "The exp and expf procedures shall calculate the base eexponential value of their argument x.",
        "the exp and expf procedures shall calculate the base eexponential value of their argument x "
    ],
    [
        "EDA",
        "The MicroPython cross-compiler shall be designed to produce a bytecode with a minimal size.",
        "the micropython cross compiler shall be intentional to produce a bytecode with a minimal size"
    ],
    [
        "EDA",
        "The MicroPython cross-compiler shall be designed to produce a bytecode with a minimal size.",
        "the micropython cross compiler shall be designed to produce a bytecode with a minimal size "
    ],
    [
        "EDA",
        "The MicroPython cross-compiler shall be designed to produce a bytecode with a minimal size.",
        "the with cross compiler shall be designed to produce a bytecode micropython a minimal size"
    ],
    [
        "EDA",
        "The MicroPython cross-compiler shall be designed to produce a bytecode with a minimal size.",
        "the micropython crabby compiler shall be designed to produce a bytecode with a minimal size"
    ],
    [
        "EDA",
        "The MicroPython cross-compiler shall be designed to produce a bytecode with a minimal size.",
        "the micropython cross compiler shall be designed to produce a bytecode with minimal size"
    ],
    [
        "EDA",
        "The MicroPython cross-compiler shall be designed to produce a bytecode with a minimal size.",
        "the micropython cross shall be designed produce a bytecode with a minimal size"
    ],
    [
        "EDA",
        "The ceil and ceilf procedures shall compute the smallest integral value not less than argument x.",
        "than ceil and ceilf procedures shall compute the smallest integral value not less the argument x"
    ],
    [
        "EDA",
        "The ceil and ceilf procedures shall compute the smallest integral value not less than argument x.",
        "the ceil inherent and ceilf procedures shall compute the smallest integral value not less than argument x"
    ],
    [
        "EDA",
        "The ceil and ceilf procedures shall compute the smallest integral value not less than argument x.",
        "the ceil and ceilf procedures shall compute the smallest integral value not less than argument cristal"
    ],
    [
        "EDA",
        "The ceil and ceilf procedures shall compute the smallest integral value not less than argument x.",
        "the ceil and ceilf procedures shall compute the smallest integral value not less than argument x "
    ],
    [
        "EDA",
        "The ceil and ceilf procedures shall compute the smallest integral value not less than argument x.",
        "the ceil and ceilf procedures shall compute the smallest integral value than less not argument x"
    ],
    [
        "EDA",
        "The ceil and ceilf procedures shall compute the smallest integral value not less than argument x.",
        "the ceil and ceilf procedures shall compute the smallest integral value not less argument x"
    ],
    [
        "EDA",
        "The MicroPython language shall support object-orientation, as defined in Python 3.4",
        "the micropython language shall support object preference as defined in python"
    ],
    [
        "EDA",
        "The MicroPython language shall support object-orientation, as defined in Python 3.4",
        "the micropython language shall support object orientation as defined in python "
    ],
    [
        "EDA",
        "The MicroPython language shall support object-orientation, as defined in Python 3.4",
        "object micropython language shall support the orientation as defined in python"
    ],
    [
        "EDA",
        "The MicroPython language shall support object-orientation, as defined in Python 3.4",
        "the micropython language shall support object orientation as defined in python"
    ],
    [
        "EDA",
        "The MicroPython language shall support object-orientation, as defined in Python 3.4",
        "the micropython language shall support object predilection as defined in python"
    ],
    [
        "EDA",
        "The MicroPython language shall support object-orientation, as defined in Python 3.4",
        "the micropython language predilection shall support object orientation as defined in python"
    ],
    [
        "EDA",
        "Basic mathematical Library Test Suite shall check the communication with the target (through GDB) by using checksums on transferred packets and it shall implement retry management.",
        "the mathematical library test suite shall check basic communication with the target using gdb by through checksums on transferred packets and it shall implement retry management"
    ],
    [
        "EDA",
        "Basic mathematical Library Test Suite shall check the communication with the target (through GDB) by using checksums on transferred packets and it shall implement retry management.",
        "basic mathematical library test suite shall check the communication with the target through gdb by using checksums on transferred packets and it shall implement retry management "
    ],
    [
        "EDA",
        "Basic mathematical Library Test Suite shall check the communication with the target (through GDB) by using checksums on transferred packets and it shall implement retry management.",
        "basic mathematical library shall check the communication with the target gdb by using checksums on packets and it shall retry"
    ],
    [
        "EDA",
        "Basic mathematical Library Test Suite shall check the communication with the target (through GDB) by using checksums on transferred packets and it shall implement retry management.",
        "basic mathematical library test suite shall check the communication checksum with the target through gdb by using checksums on transferred packets packet and it shall implement retry management"
    ],
    [
        "EDA",
        "Basic mathematical Library Test Suite shall check the communication with the target (through GDB) by using checksums on transferred packets and it shall implement retry management.",
        "basic mathematical library test cortege shall check the communicating with the target through gdb by using checksums on transferred packets and it shall implement retry management"
    ],
    [
        "EDA",
        "Basic mathematical Library Test Suite shall check the communication with the target (through GDB) by using checksums on transferred packets and it shall implement retry management.",
        "canonic mathematical library test suite shall check the communication with the target through gdb by using checksum on transferred packets and it shall implement retry management"
    ],
    [
        "EDA",
        "After being loaded in memory, the byte code generated by the MicroPython cross-compiler shall be executable by the MicroPython Virtual Machine, with the semantic specified by the MicroPython source script.",
        "after being executable in memory the by code generated by the micropython cross compiler shall be loaded byte with micropython virtual machine the the semantic specified by the micropython source script"
    ],
    [
        "EDA",
        "After being loaded in memory, the byte code generated by the MicroPython cross-compiler shall be executable by the MicroPython Virtual Machine, with the semantic specified by the MicroPython source script.",
        "after past being loaded in memory the atomic number byte code generated by the atomic number micropython cross compiler shall be executable by the micropython virtual machine with the semantic specified by the micropython source script"
    ],
    [
        "EDA",
        "After being loaded in memory, the byte code generated by the MicroPython cross-compiler shall be executable by the MicroPython Virtual Machine, with the semantic specified by the MicroPython source script.",
        "after being loaded in memory the byte code generated by the micropython cross compiler shall be executable by the micropython virtual machine with the semantic specified by the micropython source script "
    ],
    [
        "EDA",
        "After being loaded in memory, the byte code generated by the MicroPython cross-compiler shall be executable by the MicroPython Virtual Machine, with the semantic specified by the MicroPython source script.",
        "compiling program after being loaded in memory the byte code generated by the micropython cross compiler shall be executable by the micropython virtual machine with the semantic specified atomic number past by the micropython source script"
    ],
    [
        "EDA",
        "After being loaded in memory, the byte code generated by the MicroPython cross-compiler shall be executable by the MicroPython Virtual Machine, with the semantic specified by the MicroPython source script.",
        "after being loaded in storage the byte code generated by the micropython cross compiling program shall be executable by the micropython virtual machine with the semantic specified by the micropython source book"
    ],
    [
        "EDA",
        "After being loaded in memory, the byte code generated by the MicroPython cross-compiler shall be executable by the MicroPython Virtual Machine, with the semantic specified by the MicroPython source script.",
        "after being loaded in memory the byte code generated by the micropython cross compiler shall be executable by the micropython virtual machine with the semantic specified by the micropython source script"
    ]
]