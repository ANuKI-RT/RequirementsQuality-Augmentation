[
    [
        "EDA",
        "The MicroPython Virtual Machine shall be qualified with requirements of ECSS CAT-B, as defined in [AD02] and [AD03].",
        "the micropython in machine shall be qualified with requirements of ecss cat b as defined virtual ad and ad"
    ],
    [
        "EDA",
        "The MicroPython Virtual Machine shall be qualified with requirements of ECSS CAT-B, as defined in [AD02] and [AD03].",
        "the determine micropython virtual machine shall be qualified with requirements of ecss cat b as defined in ad and ad"
    ],
    [
        "EDA",
        "The MicroPython Virtual Machine shall be qualified with requirements of ECSS CAT-B, as defined in [AD02] and [AD03].",
        "the micropython car virtual machine shall be qualified with requirements of ecss cat b as defined in ad and ad"
    ],
    [
        "EDA",
        "The MicroPython Virtual Machine shall be qualified with requirements of ECSS CAT-B, as defined in [AD02] and [AD03].",
        "the micropython virtual machine shall be qualified with necessity of ecss cat b as defined in ad and ad"
    ],
    [
        "EDA",
        "The MicroPython Virtual Machine shall be qualified with requirements of ECSS CAT-B, as defined in [AD02] and [AD03].",
        "the micropython virtual machine shall be qualified with requirements of ecss cat b as defined in ad and ad "
    ],
    [
        "EDA",
        "The MicroPython Virtual Machine shall be qualified with requirements of ECSS CAT-B, as defined in [AD02] and [AD03].",
        "the micropython virtual machine shall be specify with requirements of ecss cat b as defined in ad and ad"
    ],
    [
        "EDA",
        "The fmax and fmaxf procedures shall determine the maximum numeric value of the argument x and y.",
        "the fmax and fmaxf procedures shall determine the maximum numeric value of the argument x and y"
    ],
    [
        "EDA",
        "The fmax and fmaxf procedures shall determine the maximum numeric value of the argument x and y.",
        "the fmax and fmaxf procedures shall determine the maximum numeric value of the argument x and y "
    ],
    [
        "EDA",
        "The fmax and fmaxf procedures shall determine the maximum numeric value of the argument x and y.",
        "the fmax and fmaxf procedures shall determine the maximum value of the argument x and"
    ],
    [
        "EDA",
        "The fmax and fmaxf procedures shall determine the maximum numeric value of the argument x and y.",
        "the fmax and fmaxf procedures shall learn the maximum numeric value of the argument x and y"
    ],
    [
        "EDA",
        "The fmax and fmaxf procedures shall determine the maximum numeric value of the argument x and y.",
        "the fmax and fmaxf procedures shall value the maximum numeric determine of the argument x and y"
    ],
    [
        "EDA",
        "The fmax and fmaxf procedures shall determine the maximum numeric value of the argument x and y.",
        "the fmax and fmaxf procedures y determine the maximum numeric value of the argument x and shall"
    ],
    [
        "EDA",
        "The log and logf procedures shall return Not a Number, if the argument x is Not a Number.",
        "the log and logf procedures shall return not a number if the argument x is not a number "
    ],
    [
        "EDA",
        "The log and logf procedures shall return Not a Number, if the argument x is Not a Number.",
        "the log and logf procedures shall return comprise not a number if the argument x is not a number"
    ],
    [
        "EDA",
        "The log and logf procedures shall return Not a Number, if the argument x is Not a Number.",
        "the log and amp logf procedures shall return not a number if the argument x is not a number"
    ],
    [
        "EDA",
        "The log and logf procedures shall return Not a Number, if the argument x is Not a Number.",
        "the log and logf function shall return not a number if the argument x is not a number"
    ],
    [
        "EDA",
        "The log and logf procedures shall return Not a Number, if the argument x is Not a Number.",
        "the log and logf procedures shall return not a number if the x argument is not a number"
    ],
    [
        "EDA",
        "The log and logf procedures shall return Not a Number, if the argument x is Not a Number.",
        "the and logf procedures shall return not a number if the argument x not a"
    ],
    [
        "EDA",
        "The system shall have a procedure to terminate the system.",
        "the organisation shall have a procedure to terminate the organisation"
    ],
    [
        "EDA",
        "The system shall have a procedure to terminate the system.",
        "the system shall have a procedure to terminate system the"
    ],
    [
        "EDA",
        "The system shall have a procedure to terminate the system.",
        "the system organisation shall have a procedure to terminate the system"
    ],
    [
        "EDA",
        "The system shall have a procedure to terminate the system.",
        "the system shall have a procedure to terminate the system"
    ],
    [
        "EDA",
        "The system shall have a procedure to terminate the system.",
        "the system shall have a procedure to terminate the system "
    ],
    [
        "EDA",
        "The exp and expf procedures shall calculate the base eexponential value of their argument x.",
        "the exp and shall procedures expf calculate the base eexponential value of their argument x"
    ],
    [
        "EDA",
        "The exp and expf procedures shall calculate the base eexponential value of their argument x.",
        "the exp and expf procedures shall calculate treasure the base eexponential value of their argument x"
    ],
    [
        "EDA",
        "The exp and expf procedures shall calculate the base eexponential value of their argument x.",
        "the exp and expf procedures shall calculate the base eexponential look value of their argument x"
    ],
    [
        "EDA",
        "The exp and expf procedures shall calculate the base eexponential value of their argument x.",
        "the exp and expf procedures shall calculate the base eexponential of argument x"
    ],
    [
        "EDA",
        "The exp and expf procedures shall calculate the base eexponential value of their argument x.",
        "the exp and expf procedures shall calculate the base eexponential value of their argument ten"
    ],
    [
        "EDA",
        "The exp and expf procedures shall calculate the base eexponential value of their argument x.",
        "the exp and expf procedures shall calculate the base eexponential value of their argument x "
    ],
    [
        "EDA",
        "The MicroPython cross-compiler shall be designed to produce a bytecode with a minimal size.",
        "the cross shall be designed to produce a bytecode with a size"
    ],
    [
        "EDA",
        "The MicroPython cross-compiler shall be designed to produce a bytecode with a minimal size.",
        "minimal micropython cross compiler shall be designed to produce a bytecode with a the size"
    ],
    [
        "EDA",
        "The MicroPython cross-compiler shall be designed to produce a bytecode with a minimal size.",
        "the micropython cross compiler shall be designed to produce a bytecode with a minimal size "
    ],
    [
        "EDA",
        "The MicroPython cross-compiler shall be designed to produce a bytecode with a minimal size.",
        "the micropython cross compiler shall be designed to produce a bytecode design with a minimal size"
    ],
    [
        "EDA",
        "The MicroPython cross-compiler shall be designed to produce a bytecode with a minimal size.",
        "the micropython cross compiler produce be designed to shall a bytecode with a minimal size"
    ],
    [
        "EDA",
        "The MicroPython cross-compiler shall be designed to produce a bytecode with a minimal size.",
        "amp the micropython cross compiler shall be designed to produce a bytecode with a minimal size"
    ],
    [
        "EDA",
        "The ceil and ceilf procedures shall compute the smallest integral value not less than argument x.",
        "the ceil and ceilf procedures shall compute the smallest integral value not less than argument x "
    ],
    [
        "EDA",
        "The ceil and ceilf procedures shall compute the smallest integral value not less than argument x.",
        "the ceil and ceilf procedures compute the smallest integral value not less than argument x"
    ],
    [
        "EDA",
        "The ceil and ceilf procedures shall compute the smallest integral value not less than argument x.",
        "the ceil and ceilf procedures shall compute the smallest integral value not less than contention x"
    ],
    [
        "EDA",
        "The ceil and ceilf procedures shall compute the smallest integral value not less than argument x.",
        "the ceil and ceilf inherent procedures shall compute the smallest integral value not less than argument x"
    ],
    [
        "EDA",
        "The ceil and ceilf procedures shall compute the smallest integral value not less than argument x.",
        "the ceil and ceilf procedures shall compute the smallest integral value not less than argument x"
    ],
    [
        "EDA",
        "The ceil and ceilf procedures shall compute the smallest integral value not less than argument x.",
        "the ceil and ceilf procedures shall compute the smallest integral value not less than argument to a lesser extent x"
    ],
    [
        "EDA",
        "The MicroPython language shall support object-orientation, as defined in Python 3.4",
        "the micropython language shall substantiate object orientation as defined in python"
    ],
    [
        "EDA",
        "The MicroPython language shall support object-orientation, as defined in Python 3.4",
        "the micropython language in support object orientation as defined shall python"
    ],
    [
        "EDA",
        "The MicroPython language shall support object-orientation, as defined in Python 3.4",
        "the micropython language shall support object orientation as defined in python "
    ],
    [
        "EDA",
        "The MicroPython language shall support object-orientation, as defined in Python 3.4",
        "inwards the micropython language shall support object orientation as defined in python"
    ],
    [
        "EDA",
        "The MicroPython language shall support object-orientation, as defined in Python 3.4",
        "the micropython language shall support object orientation as defined in python"
    ],
    [
        "EDA",
        "Basic mathematical Library Test Suite shall check the communication with the target (through GDB) by using checksums on transferred packets and it shall implement retry management.",
        "basic mathematical library test suite shall check the communication with the target through gdb by using checksums on transferred packets and it shall implement retry management "
    ],
    [
        "EDA",
        "Basic mathematical Library Test Suite shall check the communication with the target (through GDB) by using checksums on transferred packets and it shall implement retry management.",
        "mathematical library test suite shall the communication with the target through gdb by using checksums on transferred packets and it shall implement retry management"
    ],
    [
        "EDA",
        "Basic mathematical Library Test Suite shall check the communication with the target (through GDB) by using checksums on transferred packets and it shall implement retry management.",
        "basic mathematical it test management shall check the communication with the target through gdb by using checksums on transferred packets and library shall implement retry suite"
    ],
    [
        "EDA",
        "Basic mathematical Library Test Suite shall check the communication with the target (through GDB) by using checksums on transferred packets and it shall implement retry management.",
        "basic mathematical library test suite shall check the with the target through gdb by using checksums on transferred packets and it shall implement retry management"
    ],
    [
        "EDA",
        "Basic mathematical Library Test Suite shall check the communication with the target (through GDB) by using checksums on transferred packets and it shall implement retry management.",
        "rehear basic mathematical library test suite shall check the communication with the target through gdb information technology by using checksums on transferred packets and it shall implement retry management"
    ],
    [
        "EDA",
        "Basic mathematical Library Test Suite shall check the communication with the target (through GDB) by using checksums on transferred packets and it shall implement retry management.",
        "basic mathematical library test suite numerical shall check the communication with the target hold in through gdb by using checksums on transferred packets and it shall implement retry management"
    ],
    [
        "EDA",
        "After being loaded in memory, the byte code generated by the MicroPython cross-compiler shall be executable by the MicroPython Virtual Machine, with the semantic specified by the MicroPython source script.",
        "after being comprise loaded in memory the byte code generated by the comprise micropython cross compiler shall be executable by the micropython virtual machine consist with the semantic specified by the micropython source script"
    ],
    [
        "EDA",
        "After being loaded in memory, the byte code generated by the MicroPython cross-compiler shall be executable by the MicroPython Virtual Machine, with the semantic specified by the MicroPython source script.",
        "after compiler loaded in memory the byte code generated by specified micropython cross being shall be executable by the by virtual machine with the semantic the micropython the micropython source script"
    ],
    [
        "EDA",
        "After being loaded in memory, the byte code generated by the MicroPython cross-compiler shall be executable by the MicroPython Virtual Machine, with the semantic specified by the MicroPython source script.",
        "after being loaded in memory the byte code generated by the micropython cross compiler shall executable by the micropython machine with the semantic specified by the micropython source script"
    ],
    [
        "EDA",
        "After being loaded in memory, the byte code generated by the MicroPython cross-compiler shall be executable by the MicroPython Virtual Machine, with the semantic specified by the MicroPython source script.",
        "after being loaded in memory the byte cypher generated by the micropython cross compiler shall be executable by the micropython virtual motorcar with the semantic specified by the micropython informant script"
    ],
    [
        "EDA",
        "After being loaded in memory, the byte code generated by the MicroPython cross-compiler shall be executable by the MicroPython Virtual Machine, with the semantic specified by the MicroPython source script.",
        "after being loaded in retention the byte code father by the micropython hybrid compiler shall be executable by the micropython virtual machine with the semantic specified by the micropython source script"
    ],
    [
        "EDA",
        "After being loaded in memory, the byte code generated by the MicroPython cross-compiler shall be executable by the MicroPython Virtual Machine, with the semantic specified by the MicroPython source script.",
        "after being loaded in memory the byte code generated by the micropython cross compiler shall be executable by the micropython virtual machine with the semantic specified by the micropython source script "
    ]
]