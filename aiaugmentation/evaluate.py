import data.data as data
import data.read as read
from tabulate import tabulate

def experiment_evaluation(file:str):

    # Only .json files generated by the software can be used for evaluation, as they provide the necessary additional information
    if not file.endswith('.json'):
        raise ValueError("For Evaluation, only .json files are allowed.")
    
    experiment_samples = read.read_json_files([file])
    evaluated_samples = []
    
    for ex in experiment_samples:
        print(ex[1], "\n---", ex[2])
        user_inp = input("\nPress [j] for correct augmented and [n] for incorrect augmented.")
        print("--"*100)
        if user_inp not in ("j", "n"):
            user_inp = input("Inacceptable key pressed. Press [j] for correct augmented and [n] for incorrect augmented.")
            print("--"*100)
        else:
            ex.append(user_inp)
            evaluated_samples.append(ex)
    print(evaluated_samples)
    return evaluated_samples

def evaluation_results_calculation(file:str):
    evaluation_samples = read.read_json_files([file])
    total_amount = len(evaluation_samples)
    total_right_correct_augmented_RTT = 0
    total_wrong_correct_augmented_RTT = 0
    total_right_correct_augmented_PARA = 0
    total_wrong_correct_augmented_PARA = 0
    total_right_incorrect_augmented_GPT = 0
    total_wrong_incorrect_augmented_GPT = 0
    total_right_incorrect_augmented_EDA = 0
    total_wrong_incorrect_augmented_EDA = 0

    evaluation_samples_table_data = []
    for ev in evaluation_samples:

        if ev[0] in ("RTT", "PARA"):

            evaluation_samples_table_data.append([ev[0], ev[3], "j"])
            if ev[3] == "j" and ev[0] == "RTT":
                total_right_correct_augmented_RTT += 1
            elif ev[3] == "n" and ev[0] == "RTT":
                total_wrong_correct_augmented_RTT += 1
            elif ev[3] == "j" and ev[0] == "PARA":
                total_right_correct_augmented_PARA += 1
            elif ev[3] == "n" and ev[0] == "PARA":
                total_wrong_correct_augmented_PARA += 1

        elif ev[0] in ("GPT", "EDA"):
            evaluation_samples_table_data.append([ev[0], ev[3], "n"])
            if ev[3] == "j" and ev[0] == "GPT":
                total_wrong_incorrect_augmented_GPT += 1
            elif ev[3] == "n" and ev[0] == "GPT":
                total_right_incorrect_augmented_GPT += 1
            elif ev[3] == "j" and ev[0] == "EDA":
                total_wrong_incorrect_augmented_EDA += 1
            elif ev[3] == "n" and ev[0] == "EDA":
                total_right_incorrect_augmented_EDA += 1

    head = ["Model", "value", "expected value"]

    print(tabulate(evaluation_samples_table_data, headers=head, tablefmt="grid"))
    print("TOTAL AMOUNT: ", total_amount)
    print("RTT | Amount of data, which was correct augmented and was identified as being correct: ", total_right_correct_augmented_RTT)
    print("RTT | Amount of data, which was correct augmented and was identified as being wrong: ", total_wrong_correct_augmented_RTT)
    print("PARA | Amount of data, which was correct augmented and was identified as being correct: ", total_right_correct_augmented_PARA)
    print("PARA | Amount of data, which was correct augmented and was identified as being wrong: ", total_wrong_correct_augmented_PARA)
    print("EDA | Amount of data, which was incorrect augmented and was identified as being wrong: ", total_right_incorrect_augmented_EDA)
    print("EDA | Amount of data, which was incorrect augmented and was identified as being correct: ", total_wrong_incorrect_augmented_EDA)
    print("GPT | Amount of data, which was correct augmented and was identified as being correct: ", total_right_incorrect_augmented_GPT)
    print("GPT | Amount of data, which was correct augmented and was identified as being wrong: ", total_wrong_incorrect_augmented_GPT)

